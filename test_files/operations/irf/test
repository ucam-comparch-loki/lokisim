#! /usr/bin/env python

import imp

module, path, description = imp.find_module("SimulatorTest", ["test_files", "../.."])
mod = imp.load_module("SimulatorTest", module, path, description)

class IndirectRegisterTest(mod.SimulatorTest):        
        
    # Don't bother executing until idle before starting this test.
    def initialExecution(self):
        # Wait 60 cycles until initialisation program finishes
        self.wait(60)

    def runTest(self):
    
        # Check that we can update a pointer through the IRF
        instructions = []
        instructions.append("addui r13, r0, 40")
        instructions.append("iwtr r13, r13")
        instructions.append("addui r13, r13, 1")
        instructions.append("iwtr r13, r13")
        instructions.append("addui r13, r13, 1")
        instructions.append("iwtr r13, r13")
        instructions.append("addui r13, r13, 1")
        instructions.append("iwtr r13, r13")
        self.executeAll(0, instructions)
        
        self.assertEqual(40, self.readReg(0,40))
        self.assertEqual(41, self.readReg(0,41))
        self.assertEqual(42, self.readReg(0,42))
        self.assertEqual(43, self.readReg(0,43))
        
        # See if there are any problems with data forwarding
        # NOTE: this section of the test has been removed, since it has been
        # agreed that aliasing in the indirect register file is something the
        # compiler should deal with.
        
        #instructions = []
        #instructions.append("ori r13, r0, 32")
        #instructions.append("iwtr r13, r13")
        #instructions.append("irdr r14, r13")
        #self.executeAll(0, instructions)
        
        #self.assertEqual(32, self.readReg(0,32), "didn't write to indirect register")
        #self.assertEqual(32, self.readReg(0,14), "aliasing issues")
            
if __name__ == '__main__':
    IndirectRegisterTest().runAllTests()
