#! /usr/bin/env python

import imp

module, path, description = imp.find_module("SimulatorTest", ["test_files", "../.."])
mod = imp.load_module("SimulatorTest", module, path, description)

class PredicateTest(mod.SimulatorTest):        
        
    # Don't bother executing until idle before starting this test.
    def initialExecution(self):
        # Wait 60 cycles until initialisation program finishes
        self.wait(60)

    # Helper function to execute the instruction and get the resultant predicate
    # value automatically.
    def predTest(self, instruction, expected, description):
        self.execute(0, instruction)
        pred = self.predicate(0)
        self.assertEqual(pred, expected, description)

    def runTest(self):
        self.predTest("seteqi.p r0, r0, 1",   0, "(0 == 1) = 0")
        self.predTest("seteqi.p r0, r0, 0",   1, "(0 == 0) = 1")
        
        self.predTest("setnei.p r0, r0, 1",   1, "(0 != 1) = 1")
        self.predTest("setnei.p r0, r0, 0",   0, "(0 != 0) = 0")

        self.predTest("setlti.p r0, r0, 5",   1, "(0 <  5) = 1")
        self.predTest("setlti.p r0, r0, -5",  0, "(0 < -5) = 0")
        self.predTest("setlti.p r0, r0, 0",   0, "(0 <  0) = 0")

        self.predTest("setltui.p r0, r0, 5",  1, "(0 <  5) = 1")
        self.predTest("setltui.p r0, r0, -5", 1, "(0 <  huge number) = 1")
        self.predTest("setltui.p r0, r0, 0",  0, "(0 <  0) = 0")

        # Put a large number in r13, so we can play with integer overflow.
        bigNum = 2000000000
        self.execute(0, "lli r13, " + str(bigNum & 0xFFFF))
        self.execute(0, "lui r13, " + str(bigNum >> 16))
        
        self.predTest("addu.p r13, r0, r13", 0, "max signed int = 2.1 billion => no overflow")
        self.predTest("subu.p r12, r0, r13", 0, "carry shouldn't be set because 0 - 2e9 >= -2.1e9")
        self.predTest("subu.p r0, r12, r13", 1, "carry should be set because -2e9 - 2e9 < -2.1e9")
        self.predTest("subu.p r0, r13, r0", 0, "carry shouldn't be set because 2e9 - 0 >= -2.1e9")
        self.predTest("subu.p r0, r0, r0", 0, "carry shouldn't be set because 0 - 0 >= -2.1e9")
        self.predTest("addu.p r13, r13, r13", 1, "carry should be set because 2e9 + 2e9 > 2.1e9")
            
if __name__ == '__main__':
    PredicateTest().runAllTests()
