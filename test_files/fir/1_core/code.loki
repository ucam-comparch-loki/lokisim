fetch           r1,  76                 ; get the next instruction packet

% Load the parameters for this filter. (May deadlock if buffers are small?)
ldw             r0,  4        > 1
ldw             r0,  8        > 1
ldw             r0,  12       > 1
ldw             r0,  16       > 1
ldw             r0,  20       > 1

% Store the parameters locally.
ori             r20, ch0, 0             ; r20 = number of taps
ori             r21, ch0, 0             ; r21 = location of taps
ori             r22, ch0, 0             ; r22 = length of input
ori             r23, ch0, 0             ; r23 = location of input
ori             r24, ch0, 0             ; r24 = location to write output

% Compute end point (start point + 4*(input length + num taps - 1))
addui           r26, r20, -1
slli            r26, r26, 2             ; r26 = (taps - 1) * 4
slli            r22, r22, 2             ; r22 = input length * 4
addu            r29, r23, r22           ; r29 = input pos + input length * 4
addu            r27, r29, r26
addui           r27, r27, -4            ; r27 = end point
addu            r28, r21, r26           ; r28 = end of taps

ori.eop         r4,  r23, 0             ; r4 = position in outer loop

% Start of outer loop
ori             r10, r0,  0             ; r10 = accumulated result
subu            r6,  r4,  r26           ; r6 = current input element
ori             r5,  r21, 0             ; r5 = current tap we're using

% Start of inner loop
setgteu.p       r0,  r6,  r23           ; make sure we are beyond start of input
p?setltu.p      r0,  r6,  r29           ; make sure we are before end of input
p?ldw           r6,  0          > 1     ; load input data
p?ldw           r5,  0          > 1     ; load tap
p?ori           r7,  ch0, 0
p?mullw         r7,  ch0, r7
p?addu          r10, r10, r7            ; add new value to result

addui           r5,  r5,  4             ; move to next tap
addui           r6,  r6,  4             ; move to next input element
setgteu.p       r0,  r28, r5            ; see if we have gone through all taps yet
p?ibjmp         -40
% End of inner loop

addui           r4,  r4,  4             ; increment position in outer loop
stw             r10, r24, 0     > 2     ; store the result
addui           r24, r24, 4             ; update store location for next time
setgteu.p       r0,  r27, r4            ; see if we have finished the outer loop
p?ibjmp         -72
% End of outer loop

nop.eop
