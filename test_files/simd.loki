% SIMD framework: insert this code before the main program, and the core to
% access it will become the control core, and distribute the work across the
% given number of SIMD cores.
%
% Assumes that the number of cores to use is in memory 13 at address 0.
%
% r30 and r31 hold the SIMD parameters---the core's position in the SIMD vector
% and the total number of members, respectively---so probably should not be
% overwritten by the SIMD program.

% Set up connection to memory containing arguments
ori                 r4,  r0,  (13,0)
fetch               r1,  72
setchmap            r4,  1
ori                 r0,  r0,  2    > 1      ; connect to the argument memory
ldw                 r0,  0         > 1      ; load number of SIMD members

% Load number of SIMD members
ori                 r7,  r0,  0             ; r7 = current core we're sending to
ori                 r5,  r0,  0             ; r5 = remote core's instruction input
ori                 r6,  r0,  2             ; r6 = remote core's data input
ori.eop             r10, ch0, 0             ; r10 = number of SIMD members

% Set up connections to remote core
setchmap            r5,  2                  ; instruction input = map 2
setchmap            r6,  3                  ; data input = map 3

% Send core any parameters it needs
ori                 r0,  r7,  0    > 3      ; send core its ID
ori                 r0,  r10, 0,   > 3      ; send core number of members

% Set up remote core's channel map table and fetch program.
% Note that we need the IPK FIFO to be at least as long as this code sequence.
rmtexecute                         > 2
p?ori               r30, ch0, 0             ; r30 = this core's SIMD ID
p?addui             r4,  r30, (12,0)        ; compute memory port to use
p?ori               r8,  r0,  (1,0)         ; number of ports per core
p?mullw             r8,  r8,  r30           ; r8 = first local port
p?setchmap          r4,  0
p?addui             r0,  r8,  1    > 0      ; connect to the instruction memory
p?ori               r31, ch0, 0             ; r31 = number of SIMD members
p?fetch             r0,  224                ; load program

% If more members, loop
addui               r7,  r7,  1             ; update to next member
setlt.p             r0,  r7,  r10           ; see if we have started all members
p?addui             r5,  r5,  (1,0)         ; update instruction input
p?addui             r6,  r6,  (1,0)         ; update data input
p?ibjmp             -136                     ; loop if there's another member
nop.eop