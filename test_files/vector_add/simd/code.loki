% Set up connections to memories
fetch               r1,  40
addui               r5,  r30, 52            ; each member will access a different port
addui               r6,  r30, 56
addui               r7,  r30, 60
setchmap            r5,  1                  ; vector 1 = map 1
setchmap            r6,  2                  ; vector 2 = map 2
setchmap            r7,  3                  ; output = map 3
addui               r0,  r8,  2    > 1      ; compute which ports to return data to
addui               r0,  r8,  3    > 2
addui.eop           r0,  r8,  0    > 3

% Load parameter(s)
fetch               r1,  24
ldw                 r0,  4         > 1      ; load length of vectors
slli                r11, r30, 2             ; r11 = current position
slli                r12, r31, 2             ; r12 = stride length
slli                r10, ch0, 2             ; r10 = byte-length of vectors
addui.eop           r10, r10, -4            ; r10 = offset of final element

% Main loop
ldw                 r11, 8         > 1      ; 8 offset because we skip over 2 arguments
ldw                 r11, 8         > 2
addu                r13, ch0, ch1           ; r13 = sum of vector elements
stw                 r13, r11, 0    > 3      ; store result
addu                r11, r11, r12           ; move to next element
setlt.p             r0,  r10, r11           ; see if we have work left to do
!p?ibjmp            -24
nop.eop