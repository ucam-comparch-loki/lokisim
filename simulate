#! /usr/bin/env python

import os, subprocess, sys

if len(sys.argv) < 2:
    print "simulate: a simplified interface to the Loki simulator"
    print "Usage: simulate [simulator args] <ELF/loader file> [program args]"
    print "Options:"
    print "  -trace, -t     Generate an instruction trace"
    print "  -fast, -f      Use a much faster, but less accurate, simulator"
    sys.exit(-1)

# Parts of the command which will be executed
program = ""
programargs = ""
command = ""

# Simulator parameters
use_fast_sim = False
trace = False
    
currentArg = 1

# Get any simulator parameters (all parameters beginning with "-" until we find
# one without the "-")
for i in range(currentArg, len(sys.argv)):
    if sys.argv[i][0] == "-":
        if sys.argv[i] == "-trace" or sys.argv[i] == "-t":
            trace = True
        elif sys.argv[i] == "-fast" or sys.argv[i] == "-f":
            use_fast_sim = True
            
        currentArg += 1
    else:
        break

# The program to run
program = sys.argv[currentArg]
currentArg += 1

if os.path.isdir(program):
    program += "/loader.txt"

if not os.path.isfile(program):
    print "Error: program ", program, "not found"
    sys.exit(-1)    

# Add arguments, if any.
if len(sys.argv) >= currentArg:
    for i in range(currentArg, len(sys.argv)):
        programargs = programargs + sys.argv[i] + " "
        currentArg += 1


# Differences in syntax for the two simulators
if use_fast_sim:
    command = "loki-elf-run -v "
    
    if trace:
        command += "-t "
        
    command += program + " -- " + programargs
else:
    simulator = os.path.dirname(os.path.realpath(__file__)) + "/Debug/Loki2"
    
    if not os.path.isfile(simulator):
        print "Error: simulator not found (" + simulator + ")"
        sys.exit(-1)
    
    command = simulator + " "
    
    if trace:
        command += "-coretrace " + program + ".trace "
        
    command += "-run " + program + " --args " + programargs

# Run the simulator
print command
simulation = subprocess.Popen(command, shell=True)
returncode = simulation.wait()

# Print a message if returncode is not 0?

sys.exit(returncode)

