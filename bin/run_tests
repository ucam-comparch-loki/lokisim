#! /usr/bin/env python

# Simple script for running all regression tests in a directory.
# If given no arguments, recursively runs all tests in all subdirectories.
# If given the names of any subdirectories, only runs the tests within.

import os, subprocess, sys, threading, time

parallel = False
threadFinishedFlag = None
testCount = 0
testsPassed = 0

# Allow parallel tests by spawning a new thread for each test.
class Test(threading.Thread):
    def __init__(self, command):
        threading.Thread.__init__(self)
        self._command = command
    
    def run(self):
        executeTest(self._command)
        threadFinishedFlag.set()
        
def executeTest(command):
    global testCount, testsPassed
    testCount += 1
    process = subprocess.Popen(command)
    process.wait()
    if process.returncode == 0:
        testsPassed += 1    

# Run a single test in a single directory.
def runTest(directory):
    command = directory + "/test"
    if parallel:
        thread = Test(command)
        thread.start()
    else:
        executeTest(command)

# Determine whether this collection of files contains all information required
# to run a test.
def containsTest(directory):
    return "test" in directory
        
# Traverse the directory tree depth-first, running tests wherever possible.
# The filter argument allows only a subset of tests to be run which contain
# the filter text (e.g. "vector_add", "simd") as part of their path.
# TODO: full regexp support.
def testAll(directory, filter=""):
    contents = os.listdir(directory)
    contents.sort()
    if containsTest(contents) and directory.find(filter) >= 0:
        runTest(directory)
    if ".svn" in contents:
        contents.remove(".svn")
    for entry in contents:
        fullpath = directory + "/" + entry
        if os.path.isdir(fullpath):
            testAll(fullpath, filter)
    
# See if there is a simulator where we expect it to be.
def simulatorFound(location):
    return os.path.exists(location)

################################################################################

# Execution starts here.
directory = "../test_files"
startTime = time.time()

print """Note: tests are out of date, and not all are expected to pass.
The preferred testing method is to use a compiler-generated binary, but also
bug Daniel and tell him to sort the test suite out."""

simulator = "lokisim"
if not simulatorFound(simulator):
    print "Error: no simulator found at " + simulator
    exit(1)

# The filter controls which tests to run by seeing if the test name contains
# the filter text. TODO: full regexp support.
filter = ""

# Run tests in all named subdirectories.
for i in range(1, len(sys.argv)):
    argument = sys.argv[i]
    if argument[0] != "-":
        filter = argument.rstrip("/")   # remove any trailing slashes
    elif argument == "-p" or argument == "-turbo":
        parallel = True
        threadFinishedFlag = threading.Event()
        
testAll(directory, filter)
    
# If there are multiple threads, wait until they have all finished. Each will
# set the flag to say that they have finished.
while threading.activeCount() > 1:
    threadFinishedFlag.wait()
    threadFinishedFlag.clear()

elapsedTime = time.time() - startTime
print "Passed %(passed)s/%(tests)s tests in %(time).3f s" % \
      {'tests': testCount, 'passed': testsPassed, 'time': elapsedTime}

