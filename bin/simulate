#! /usr/bin/env python

from __future__ import print_function
import os, subprocess, sys

if len(sys.argv) < 2:
    print("simulate: a simplified interface to the Loki simulators")
    print("Usage: simulate [simulator args] <program binary> [program args]")
    print("Options:")
    print("  -callgrind <file>  Dump Callgrind information about function calls")
    print("  -dump, -d          Print lots of debug information (slow sim only)")
    print("  -energy, -e        Generate a log of all main energy-consuming operations")
    print("  -fast, -f          Use a much faster, but less accurate, simulator")
    print("  -stalltrace <file> Dump information on all stalls to the named file")
    print("  -summary, -s       Print a summary of execution behaviour at the end")
    print("  -trace, -t         Generate an instruction trace")
    sys.exit(-1)

# Parts of the command which will be executed
simulatorargs = ""
program = ""
programargs = ""
command = ""

# Simulator parameters
use_fast_sim = False
trace = False
callgrind = False
cgFile = None
dump = False
energy = False
stalls = False
stallFile = None
summary = False
    
currentArg = 1

# Get any simulator parameters (all parameters beginning with "-" until we find
# one without the "-")
for i in range(currentArg, len(sys.argv)):
    arg = sys.argv[i]
    if arg[0] == "-":
        if arg == "-trace" or arg == "-t":
            trace = True
        elif arg == "-fast" or arg == "-f":
            use_fast_sim = True
        elif arg == "-callgrind":
            callgrind = True
            cgFile = sys.argv[i+1]
            i += 1
            currentArg += 1
        elif arg == "-dump" or arg == "-d":
            dump = True
        elif arg == "-energy" or arg == "-e":
            energy = True
        elif arg == "-stalltrace":
            stalls = True
            stallFile = sys.argv[i+1]
            i += 1
            currentArg += 1
        elif arg == "-summary" or arg == "-s":
            summary = True
        else:
            simulatorargs += arg + " "
            
        currentArg += 1
    else:
        break

# The program to run
program = sys.argv[currentArg]
currentArg += 1

if os.path.isdir(program):
    program += "/loader.txt"

if not os.path.isfile(program):
    print("Error: program ", program, "not found", file=sys.stderr)
    sys.exit(-1)    

# Add arguments, if any.
if len(sys.argv) >= currentArg:
    for i in range(currentArg, len(sys.argv)):
        programargs = programargs + sys.argv[i] + " "
        currentArg += 1


# Differences in syntax for the two simulators
if use_fast_sim:
    command = "exlj $CSIMROOT/sim_run.lua " + simulatorargs
    
    if trace:
        command = "DEBUG=true " + command
        
    command += program + " " + programargs
else:
    simulator = os.path.dirname(os.path.realpath(__file__)) + "/lokisim"
    
    if not os.path.isfile(simulator):
        print("Error: simulator not found (" + simulator + ")", file=sys.stderr)
        sys.exit(-1)
    
    command = simulator + " "
    
    if trace:
        #command += "-coretrace " + program + ".trace "  # required for hot_code.py
        command += "-trace "
    if callgrind:
        command += "-callgrind " + cgFile + " "
    if energy:
        command += "-energytrace " + program + ".xml "
    if stalls:
        command += "-stalltrace " + stallFile + " "
    if summary:
        command += "-summary "
    
    # Why must simulator args go after the program to be run?
    command += "-run " + program + " " + simulatorargs
    
    if dump:
        command += "-PDEBUG=1 "
    
    command += "--args " + programargs

# Run the simulator
print(command, file=sys.stderr)
simulation = subprocess.Popen(command, shell=True)
returncode = simulation.wait()

# Print a message if returncode is not 0?

sys.exit(returncode)

