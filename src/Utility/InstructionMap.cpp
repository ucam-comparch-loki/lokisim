/*
 * InstructionMap.cpp
 *
 * Automatically generated by update_isa.py on 2011-10-03.
 *
 */

#include "InstructionMap.h"
#include <assert.h>
#include <iostream>
#include <map>

bool InstructionMap::storesResult(opcode_t opcode) {return hasDestReg(opcode);} // remove?

bool InstructionMap::hasDestReg(opcode_t opcode) {
  static const bool _hasDestReg[] = {1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};

  return _hasDestReg[opcode];
}

bool InstructionMap::hasSrcReg1(opcode_t opcode) {
  static const bool _hasSrcReg1[] = {1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};

  return _hasSrcReg1[opcode];
}

bool InstructionMap::hasSrcReg2(opcode_t opcode) {
  static const bool _hasSrcReg2[] = {1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};

  return _hasSrcReg2[opcode];
}

bool InstructionMap::hasImmediate(opcode_t opcode) {
  static const bool _hasImmediate[] = {0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};

  return _hasImmediate[opcode];
}

bool InstructionMap::hasRemoteChannel(opcode_t opcode) {
  static const bool _hasRemoteChannel[] = {1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};

  return _hasRemoteChannel[opcode];
}

bool InstructionMap::setsPredicate(opcode_t opcode) {
  static const bool _setsPredicate[] = {0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};

  return _setsPredicate[opcode];
}

bool InstructionMap::isALUOperation(opcode_t opcode) {
  static const bool _isALUOperation[] = {1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};

  return _isALUOperation[opcode];
}

bool InstructionMap::hasSignedImmediate(opcode_t opcode) {
  static const bool _hasSignedImmediate[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};

  return _hasSignedImmediate[opcode];
}

int  InstructionMap::numInstructions() {return 89;} // 128?

const inst_name_t& InstructionMap::name(opcode_t opcode, function_t function) {
  static const inst_name_t opcode_to_name[] = {"subu", "subu.p", "nori", "nori.p", "psel", "nxipk", "andi", "andi.p", "mulhw", "", "ori", "ori.p", "mullw", "", "xori", "xori.p", "mulhwu", "", "seteqi", "seteqi.p", "", "", "setnei", "setnei.p", "", "", "setlti", "setlti.p", "", "", "setltui", "setltui.p", "", "", "setgtei", "setgtei.p", "", "", "setgteui", "setgteui.p", "", "", "slli", "", "", "", "srli", "srli.p", "", "", "srai", "", "", "", "addui", "addui.p", "", "", "", "", "", "", "", "", "iwtr", "rmtnxipk", "ldw", "tstch.p", "psel.fetch", "rmtexecute", "ldhwu", "", "setchmap", "syscall", "ldbu", "", "", "ibjmp", "lli", "", "stw", "woche", "setchmapi", "", "sthw", "fetchr", "fetch", "", "stb", "fillr", "fetchpst", "", "", "fetchpstr", "fill", "", "", "lui", "tstch", "", "", "", "irdr", "", "", "selch", "clz", "", "", "tstchi", "", "tstchi.p", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", ""};
  
  static const inst_name_t function_to_name[] = {"nor", "and", "or", "xor", "seteq", "setne", "setlt", "setltu", "setgte", "setgteu", "sll", "srl", "sra", "addu", "subu", ""};
  
  static const inst_name_t function_to_name_p[] = {"nor.p", "and.p", "or.p", "xor.p", "seteq.p", "setne.p", "setlt.p", "setltu.p", "setgte.p", "setgteu.p", "", "srl.p", "", "addu.p", "subu.p", ""};

  if(opcode == 0)      return function_to_name[function];
  else if(opcode == 1) return function_to_name_p[function];
  else                 return opcode_to_name[opcode];
}

format_t InstructionMap::format(opcode_t opcode) {
  static const format_t opcode_to_format[] = {FMT_3R, FMT_3R, FMT_2R, FMT_2R, FMT_3R, FMT_0R, FMT_2R, FMT_2R, FMT_3R, (format_t)0, FMT_2R, FMT_2R, FMT_3R, (format_t)0, FMT_2R, FMT_2R, FMT_3R, (format_t)0, FMT_2R, FMT_2R, (format_t)0, (format_t)0, FMT_2R, FMT_2R, (format_t)0, (format_t)0, FMT_2R, FMT_2R, (format_t)0, (format_t)0, FMT_2R, FMT_2R, (format_t)0, (format_t)0, FMT_2R, FMT_2R, (format_t)0, (format_t)0, FMT_2R, FMT_2R, (format_t)0, (format_t)0, FMT_2Rs, (format_t)0, (format_t)0, (format_t)0, FMT_2Rs, FMT_2Rs, (format_t)0, (format_t)0, FMT_2Rs, (format_t)0, (format_t)0, (format_t)0, FMT_2R, FMT_2R, (format_t)0, (format_t)0, (format_t)0, (format_t)0, (format_t)0, (format_t)0, (format_t)0, (format_t)0, FMT_2R, FMT_0R, FMT_1R, FMT_2R, FMT_2Rnc, FMT_0R, FMT_1R, (format_t)0, FMT_2Rnc, FMT_0Rnc, FMT_1R, (format_t)0, (format_t)0, FMT_0R, FMT_1Rnc, (format_t)0, FMT_2R, FMT_0R, FMT_1Rnc, (format_t)0, FMT_2R, FMT_FF, FMT_1Rnc, (format_t)0, FMT_2R, FMT_FF, FMT_1Rnc, (format_t)0, (format_t)0, FMT_FF, FMT_1Rnc, (format_t)0, (format_t)0, FMT_1Rnc, FMT_2R, (format_t)0, (format_t)0, (format_t)0, FMT_2R, (format_t)0, (format_t)0, FMT_1Rnc, FMT_2R, (format_t)0, (format_t)0, FMT_1R, (format_t)0, FMT_1R, (format_t)0, (format_t)0, (format_t)0, (format_t)0, (format_t)0, (format_t)0, (format_t)0, (format_t)0, (format_t)0, (format_t)0, (format_t)0, (format_t)0, (format_t)0, (format_t)0, (format_t)0, (format_t)0};

  return opcode_to_format[opcode];
}

opcode_t InstructionMap::opcode(const inst_name_t& name) {
  static std::map<inst_name_t,opcode_t> name_to_opcode;
  static bool initialised = false;
  
  if(!initialised) {
    name_to_opcode["nor"] = OP_NOR;                   name_to_opcode["and"] = OP_AND;               
    name_to_opcode["or"] = OP_OR;                     name_to_opcode["xor"] = OP_XOR;               
    name_to_opcode["seteq"] = OP_SETEQ;               name_to_opcode["setne"] = OP_SETNE;           
    name_to_opcode["setlt"] = OP_SETLT;               name_to_opcode["setltu"] = OP_SETLTU;         
    name_to_opcode["setgte"] = OP_SETGTE;             name_to_opcode["setgteu"] = OP_SETGTEU;       
    name_to_opcode["sll"] = OP_SLL;                   name_to_opcode["srl"] = OP_SRL;               
    name_to_opcode["sra"] = OP_SRA;                   name_to_opcode["addu"] = OP_ADDU;             
    name_to_opcode["subu"] = OP_SUBU;                 name_to_opcode["nor.p"] = OP_NOR_P;           
    name_to_opcode["and.p"] = OP_AND_P;               name_to_opcode["or.p"] = OP_OR_P;             
    name_to_opcode["xor.p"] = OP_XOR_P;               name_to_opcode["seteq.p"] = OP_SETEQ_P;       
    name_to_opcode["setne.p"] = OP_SETNE_P;           name_to_opcode["setlt.p"] = OP_SETLT_P;       
    name_to_opcode["setltu.p"] = OP_SETLTU_P;         name_to_opcode["setgte.p"] = OP_SETGTE_P;     
    name_to_opcode["setgteu.p"] = OP_SETGTEU_P;       name_to_opcode["srl.p"] = OP_SRL_P;           
    name_to_opcode["addu.p"] = OP_ADDU_P;             name_to_opcode["subu.p"] = OP_SUBU_P;         
    name_to_opcode["nori"] = OP_NORI;                 name_to_opcode["nori.p"] = OP_NORI_P;         
    name_to_opcode["andi"] = OP_ANDI;                 name_to_opcode["andi.p"] = OP_ANDI_P;         
    name_to_opcode["ori"] = OP_ORI;                   name_to_opcode["ori.p"] = OP_ORI_P;           
    name_to_opcode["xori"] = OP_XORI;                 name_to_opcode["xori.p"] = OP_XORI_P;         
    name_to_opcode["seteqi"] = OP_SETEQI;             name_to_opcode["seteqi.p"] = OP_SETEQI_P;     
    name_to_opcode["setnei"] = OP_SETNEI;             name_to_opcode["setnei.p"] = OP_SETNEI_P;     
    name_to_opcode["setlti"] = OP_SETLTI;             name_to_opcode["setlti.p"] = OP_SETLTI_P;     
    name_to_opcode["setltui"] = OP_SETLTUI;           name_to_opcode["setltui.p"] = OP_SETLTUI_P;   
    name_to_opcode["setgtei"] = OP_SETGTEI;           name_to_opcode["setgtei.p"] = OP_SETGTEI_P;   
    name_to_opcode["setgteui"] = OP_SETGTEUI;         name_to_opcode["setgteui.p"] = OP_SETGTEUI_P; 
    name_to_opcode["slli"] = OP_SLLI;                 name_to_opcode["srli"] = OP_SRLI;             
    name_to_opcode["srli.p"] = OP_SRLI_P;             name_to_opcode["srai"] = OP_SRAI;             
    name_to_opcode["addui"] = OP_ADDUI;               name_to_opcode["addui.p"] = OP_ADDUI_P;       
    name_to_opcode["psel"] = OP_PSEL;                 name_to_opcode["rmtnxipk"] = OP_RMTNXIPK;     
    name_to_opcode["setchmap"] = OP_SETCHMAP;         name_to_opcode["setchmapi"] = OP_SETCHMAPI;   
    name_to_opcode["mulhw"] = OP_MULHW;               name_to_opcode["rmtexecute"] = OP_RMTEXECUTE; 
    name_to_opcode["psel.fetch"] = OP_PSEL_FETCH;     name_to_opcode["fetch"] = OP_FETCH;           
    name_to_opcode["fetchr"] = OP_FETCHR;             name_to_opcode["fetchpst"] = OP_FETCHPST;     
    name_to_opcode["fetchpstr"] = OP_FETCHPSTR;       name_to_opcode["fill"] = OP_FILL;             
    name_to_opcode["fillr"] = OP_FILLR;               name_to_opcode["mullw"] = OP_MULLW;           
    name_to_opcode["ibjmp"] = OP_IBJMP;               name_to_opcode["irdr"] = OP_IRDR;             
    name_to_opcode["mulhwu"] = OP_MULHWU;             name_to_opcode["syscall"] = OP_SYSCALL;       
    name_to_opcode["iwtr"] = OP_IWTR;                 name_to_opcode["lui"] = OP_LUI;               
    name_to_opcode["woche"] = OP_WOCHE;               name_to_opcode["lli"] = OP_LLI;               
    name_to_opcode["clz"] = OP_CLZ;                   name_to_opcode["stw"] = OP_STW;               
    name_to_opcode["ldw"] = OP_LDW;                   name_to_opcode["sthw"] = OP_STHW;             
    name_to_opcode["ldhwu"] = OP_LDHWU;               name_to_opcode["stb"] = OP_STB;               
    name_to_opcode["ldbu"] = OP_LDBU;                 name_to_opcode["selch"] = OP_SELCH;           
    name_to_opcode["tstch"] = OP_TSTCH;               name_to_opcode["tstch.p"] = OP_TSTCH_P;       
    name_to_opcode["tstchi"] = OP_TSTCHI;             name_to_opcode["tstchi.p"] = OP_TSTCHI_P;     
    name_to_opcode["nxipk"] = OP_NXIPK;           
    initialised = true;
  }

  if(name_to_opcode.find(name) == name_to_opcode.end()) {
    std::cerr << "Error: unknown instruction: " << name << std::endl;
    throw std::exception();
  }
  else return name_to_opcode[name];
}

function_t InstructionMap::function(const inst_name_t& name) {
  static std::map<inst_name_t,function_t> name_to_function;
  static bool initialised = false;
  
  if(!initialised) {
    name_to_function["nor"] = (function_t)0;          name_to_function["and"] = (function_t)1;      
    name_to_function["or"] = (function_t)2;           name_to_function["xor"] = (function_t)3;      
    name_to_function["seteq"] = (function_t)4;        name_to_function["setne"] = (function_t)5;    
    name_to_function["setlt"] = (function_t)6;        name_to_function["setltu"] = (function_t)7;   
    name_to_function["setgte"] = (function_t)8;       name_to_function["setgteu"] = (function_t)9;  
    name_to_function["sll"] = (function_t)10;         name_to_function["srl"] = (function_t)11;     
    name_to_function["sra"] = (function_t)12;         name_to_function["addu"] = (function_t)13;    
    name_to_function["subu"] = (function_t)14;        name_to_function["nor.p"] = (function_t)0;    
    name_to_function["and.p"] = (function_t)1;        name_to_function["or.p"] = (function_t)2;     
    name_to_function["xor.p"] = (function_t)3;        name_to_function["seteq.p"] = (function_t)4;  
    name_to_function["setne.p"] = (function_t)5;      name_to_function["setlt.p"] = (function_t)6;  
    name_to_function["setltu.p"] = (function_t)7;     name_to_function["setgte.p"] = (function_t)8; 
    name_to_function["setgteu.p"] = (function_t)9;    name_to_function["srl.p"] = (function_t)11;   
    name_to_function["addu.p"] = (function_t)13;      name_to_function["subu.p"] = (function_t)14;  

    initialised = true;
  }

  assert(name_to_function.find(name) != name_to_function.end());
  return name_to_function[name];
}

function_t InstructionMap::function(opcode_t opcode) {
  static const function_t opcode_to_function[] = {(function_t)14, (function_t)14, (function_t)0, (function_t)0, (function_t)16, (function_t)-1, (function_t)1, (function_t)1, (function_t)17, (function_t)0, (function_t)2, (function_t)2, (function_t)18, (function_t)0, (function_t)3, (function_t)3, (function_t)19, (function_t)0, (function_t)4, (function_t)4, (function_t)0, (function_t)0, (function_t)5, (function_t)5, (function_t)0, (function_t)0, (function_t)6, (function_t)6, (function_t)0, (function_t)0, (function_t)7, (function_t)7, (function_t)0, (function_t)0, (function_t)8, (function_t)8, (function_t)0, (function_t)0, (function_t)9, (function_t)9, (function_t)0, (function_t)0, (function_t)10, (function_t)0, (function_t)0, (function_t)0, (function_t)11, (function_t)11, (function_t)0, (function_t)0, (function_t)12, (function_t)0, (function_t)0, (function_t)0, (function_t)13, (function_t)13, (function_t)0, (function_t)0, (function_t)0, (function_t)0, (function_t)0, (function_t)0, (function_t)0, (function_t)0, (function_t)-1, (function_t)2, (function_t)13, (function_t)-1, (function_t)-1, (function_t)-1, (function_t)13, (function_t)0, (function_t)-1, (function_t)-1, (function_t)13, (function_t)0, (function_t)0, (function_t)-1, (function_t)2, (function_t)0, (function_t)13, (function_t)-1, (function_t)-1, (function_t)0, (function_t)13, (function_t)-1, (function_t)-1, (function_t)0, (function_t)13, (function_t)-1, (function_t)-1, (function_t)0, (function_t)0, (function_t)-1, (function_t)-1, (function_t)0, (function_t)0, (function_t)2, (function_t)-1, (function_t)0, (function_t)0, (function_t)0, (function_t)-1, (function_t)0, (function_t)0, (function_t)-1, (function_t)20, (function_t)0, (function_t)0, (function_t)-1, (function_t)0, (function_t)-1, (function_t)0, (function_t)0, (function_t)0, (function_t)0, (function_t)0, (function_t)0, (function_t)0, (function_t)0, (function_t)0, (function_t)0, (function_t)0, (function_t)0, (function_t)0, (function_t)0, (function_t)0, (function_t)0};

  return opcode_to_function[opcode];
}
