//-------------------------------------------------------------------------------------------------
// Loki Project
// Software Simulator for Design Space Exploration
//-------------------------------------------------------------------------------------------------
// Shared L1 Cache Subsystem Wrapper Definition
//-------------------------------------------------------------------------------------------------
// Defines a wrapper containing all modules comprising the Shared L1 Cache Subsystem.
//-------------------------------------------------------------------------------------------------
// File:       SharedL1CacheSubsystem.h
// Author:     Andreas Koltes (andreas.koltes@cl.cam.ac.uk)
// Created on: 28/01/2011
//-------------------------------------------------------------------------------------------------

#ifndef SHAREDL1CACHESUBSYSTEM_HPP_
#define SHAREDL1CACHESUBSYSTEM_HPP_

#include "../../Utility/Parameters.h"
#include "../../Utility/BatchMode/BatchModeEventRecorder.h"
#include "../TileComponent.h"
#include "SharedL1CacheBank.h"
#include "SharedL1CacheCrossbarSwitch.h"
#include "SharedL1CacheController.h"
#include "SharedL1CacheNetworkInterface.h"
#include "SimplifiedBackgroundMemory.h"

class SharedL1CacheSubsystem : public TileComponent {
	//---------------------------------------------------------------------------------------------
	// Ports
	//---------------------------------------------------------------------------------------------

public:

	// All ports are inherited from TileComponent

	//sc_in<bool>			clock;					// Clock
	//sc_in<Word>			*in;					// All inputs to the component. There should be NUM_CLUSTER_INPUTS of them.
	//sc_out<AddressedWord>	*out;					// All outputs of the component. There should be NUM_CLUSTER_OUTPUTS of them.
	//sc_in<bool>			*flowControlIn;			// A flow control signal for each output (NUM_CLUSTER_OUTPUTS).
	//sc_out<int> 			*flowControlOut;		// A flow control signal for each input (NUM_CLUSTER_INPUTS). Each one tells how much space is remaining in a particular input buffer.
	//sc_out<bool>			idle;					// Signal that this component is not currently doing any work.

	//---------------------------------------------------------------------------------------------
	// Subcomponents
	//---------------------------------------------------------------------------------------------

private:

	SharedL1CacheNetworkInterface **mNetworkInterfaces;
	SharedL1CacheController **mControllers;
	SharedL1CacheCrossbarSwitch mCrossbarSwitch;
	SharedL1CacheBank **mMemoryBanks;
	SimplifiedBackgroundMemory mBackgroundMemory;

	//---------------------------------------------------------------------------------------------
	// Signals
	//---------------------------------------------------------------------------------------------

private:

	sc_signal<bool>				*sNetworkInterfaceIdle;		// Idle signals generated by network interfaces
	sc_signal<bool>				*sControllerIdle;			// Idle signals generated by cache controllers

	// Connections between network interfaces and controllers

	sc_signal<Word>				*sN2CDataRx;				// Data from queue forwarded to cache controller
	sc_signal<bool>				*sN2CDataRxAvailable;		// Indicates whether input data is available
	sc_signal<bool>				*sC2NDataRxAcknowledge;		// Indicates that the data word got consumed by the cache controller

	sc_signal<AddressedWord>	*sC2NDataTx;				// Data to send to network
	sc_signal<bool>				*sC2NDataTxEnable;			// Output enable signal
	sc_signal<bool>				*sN2CDataTxFree;			// Indicates whether output data can be sent

	// Connections between controllers and crossbar switch

	sc_signal<uint32_t>			*sC2SAddress;				// Memory address
	sc_signal<uint64_t>			*sC2SData;					// Data word to be written
	sc_signal<uint8_t>			*sC2SByteMask;				// Byte mask of data to be written
	sc_signal<bool>				*sC2SReadEnable;			// Read enable signal
	sc_signal<bool>				*sC2SWriteEnable;			// Write enable signal

	sc_signal<uint64_t>			*sS2CData;					// Data word read from memory
	sc_signal<bool>				*sS2CAcknowledge;			// Acknowledgement signal from memory

	// Connections between crossbar switch and memory banks

	sc_signal<uint32_t>			*sS2MAddress;				// Address input from crossbar switch
	sc_signal<uint64_t>			*sS2MWriteData;				// Data word input from crossbar switch
	sc_signal<uint8_t>			*sS2MByteMask;				// Byte mask input from crossbar switch
	sc_signal<bool>				*sS2MReadEnable;			// Read enable signal input from crossbar switch
	sc_signal<bool>				*sS2MWriteEnable;			// Write enable signal input from crossbar switch

	sc_signal<uint64_t>			*sM2SReadData;				// Data word output to crossbar switch
	sc_signal<bool>				*sM2SAcknowledge;			// Acknowledgement signal output to crossbar switch

	// Connections between memory banks and background memory

	sc_signal<uint32_t>			*sM2BAddress;				// Address output to background memory
	sc_signal<uint64_t>			*sM2BWriteData;				// Data word output to background memory
	sc_signal<bool>				*sM2BReadEnable;			// Read enable signal output to background memory
	sc_signal<bool>				*sM2BWriteEnable;			// Write enable signal output to background memory

	sc_signal<uint64_t>			*sB2MReadData;				// Data word input from background memory
	sc_signal<bool>				*sB2MAcknowledge;			// Acknowledgement signal input from background memory

	//---------------------------------------------------------------------------------------------
	// Utility definitions
	//---------------------------------------------------------------------------------------------

private:

	BatchModeEventRecorder		*vEventRecorder;

	static const int			kPropertyChannels				= 1000;
	static const int			kPropertyInterfaceQueueDepth	= 1001;
	static const int			kPropertyBanks					= 1002;
	static const int			kPropertySetsPerBank			= 1003;
	static const int			kPropertyAssociativity			= 1004;
	static const int			kPropertyLineSize				= 1005;
	static const int			kPropertySequentialSearch		= 1006;
	static const int			kPropertyRandomReplacement		= 1007;
	static const int			kPropertyMemoryQueueDepth		= 1008;
	static const int			kPropertyMemoryDelayCycles		= 1009;

	//---------------------------------------------------------------------------------------------
	// Processes
	//---------------------------------------------------------------------------------------------

private:

	void processUpdateIdle();

	//---------------------------------------------------------------------------------------------
	// Constructors / Destructors
	//---------------------------------------------------------------------------------------------

public:

	SC_HAS_PROCESS(SharedL1CacheSubsystem);
	SharedL1CacheSubsystem(sc_module_name name, ComponentID id, BatchModeEventRecorder *eventRecorder);
	virtual ~SharedL1CacheSubsystem();

	//---------------------------------------------------------------------------------------------
	// Simulation utility methods inherited from TileComponent - not part of simulated logic
	//---------------------------------------------------------------------------------------------

public:

	// Initialise the contents of this memory to the Words in the given vector

	virtual void storeData(const std::vector<Word>& data, MemoryAddr location);

	// Print the contents of this memory

	virtual void print(MemoryAddr start, MemoryAddr end) const;

	// Return the value at the given address

	virtual const Word readWord(MemoryAddr addr) const;

	//---------------------------------------------------------------------------------------------
	// Simulation utility methods inherited from Component - not part of simulated logic
	//---------------------------------------------------------------------------------------------

public:

	// The area of this component in square micrometres

	virtual double area() const;

	// The energy consumed by this component in picojoules

	virtual double energy() const;
};

#endif /* SHAREDL1CACHESUBSYSTEM_HPP_ */
