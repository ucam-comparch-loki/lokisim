#! /usr/bin/env python

# Simple script for running all regression tests in a directory.
# If given no arguments, recursively runs all tests in all subdirectories.
# If given the names of any subdirectories, only runs the tests within.

import os, subprocess, sys, threading, time

# The start of a parallel implementation.
# Problems:
#  * The tests keep changing the current working directory.
class Test(threading.Thread):
    def __init__(self, command):
        threading.Thread.__init__(self)
        self._command = command
    
    def run(self):
        process = subprocess.Popen(self._command)
        process.wait()

parallel = False
    
def runTest(directory):
    cwd = os.getcwd()
    os.chdir(directory)
    #command = directory + "/test"
    command = "./test"
    if parallel:
        thread = Test(command)
        thread.start()
    else:
        process = subprocess.Popen(command)
        process.wait()
    os.chdir(cwd)

# Determine whether this collection of files contains all information required
# to run a test.
def containsTest(directory):
    return "test" in directory
    
    
# Traverse the directory tree depth-first, running tests wherever possible.
def testAll(directory):
    testCount = 0
    contents = os.listdir(directory)
    contents.sort()
    if containsTest(contents):
        runTest(directory)
        testCount = testCount + 1
    if ".svn" in contents:
        contents.remove(".svn")
    for entry in contents:
        fullpath = directory + "/" + entry
        if os.path.isdir(fullpath):
            testCount += testAll(fullpath)
    return testCount
    
# See if there is a simulator where we expect it to be.
def simulatorFound(location):
    return os.path.exists(location)
        
# Execution starts here.
directory = "test_files"
testCount = 0
startTime = time.time()

simulator = "Debug/Loki2"
if not simulatorFound(simulator):
    print "Error: no simulator found at " + simulator
    exit()

if len(sys.argv) >= 2:
    # Run tests in all named subdirectories.
    for i in range(1, len(sys.argv)):
        argument = sys.argv[i]
        if argument[0] != "-":
            subdir = directory + "/" + argument
            testCount += testAll(subdir)
        elif argument == "-p":
            parallel = True
            testCount = testAll(directory)
else:
    # Run all tests.
    testCount = testAll(directory)
    
# If there are multiple threads, wait until they have all finished.
while threading.activeCount() > 1:
    pass

elapsedTime = time.time() - startTime
print "Completed %(tests)s tests in %(time).3f s" % {'tests': testCount, 'time': elapsedTime}

