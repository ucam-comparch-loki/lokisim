#! /usr/bin/env python

# Simple script for running all regression tests in a directory.
# If given no arguments, recursively runs all tests in all subdirectories.
# If given the names of any subdirectories, only runs the tests within.

import os, subprocess, sys, threading, time

parallel = False
threadFinishedFlag = None
testCount = 0
testsPassed = 0

# Allow parallel tests by spawning a new thread for each test.
class Test(threading.Thread):
    def __init__(self, command):
        threading.Thread.__init__(self)
        self._command = command
    
    def run(self):
        executeTest(self._command)
        threadFinishedFlag.set()
        
def executeTest(command):
    global testCount, testsPassed
    testCount += 1
    process = subprocess.Popen(command)
    process.wait()
    if process.returncode == 0:
        testsPassed += 1    

# Run a single test in a single directory.
def runTest(directory):
    command = directory + "/test"
    if parallel:
        thread = Test(command)
        thread.start()
    else:
        executeTest(command)

# Determine whether this collection of files contains all information required
# to run a test.
def containsTest(directory):
    return "test" in directory
        
# Traverse the directory tree depth-first, running tests wherever possible.
def testAll(directory):
    contents = os.listdir(directory)
    contents.sort()
    if containsTest(contents):
        runTest(directory)
    if ".svn" in contents:
        contents.remove(".svn")
    for entry in contents:
        fullpath = directory + "/" + entry
        if os.path.isdir(fullpath):
            testAll(fullpath)
    
# See if there is a simulator where we expect it to be.
def simulatorFound(location):
    return os.path.exists(location)

################################################################################

# Execution starts here.
directory = "test_files"
startTime = time.time()

simulator = "Debug/Loki2"
if not simulatorFound(simulator):
    print "Error: no simulator found at " + simulator
    exit(1)

if len(sys.argv) >= 2:
    # Run tests in all named subdirectories.
    for i in range(1, len(sys.argv)):
        argument = sys.argv[i]
        if argument[0] != "-":
            subdir = directory + "/" + argument
            testAll(subdir)
        elif argument == "-p" or argument == "-turbo":
            parallel = True
            threadFinishedFlag = threading.Event()
            testAll(directory)
else:
    # Run all tests.
    testAll(directory)
    
# If there are multiple threads, wait until they have all finished. Each will
# set the flag to say that they have finished.
while threading.activeCount() > 1:
    threadFinishedFlag.wait()
    threadFinishedFlag.clear()

elapsedTime = time.time() - startTime
print "Passed %(passed)s/%(tests)s tests in %(time).3f s" % \
      {'tests': testCount, 'passed': testsPassed, 'time': elapsedTime}

