#! /usr/bin/env python

# Simple script for running all regression tests in a directory.
# If given no arguments, recursively runs all tests in all subdirectories.
# If given the names of any subdirectories, only runs the tests within.

import os, subprocess, sys, tempfile, time

# Update the loader so it points to a particular directory.
def updateMetaLoader(directory):
    metaloader = open("test_files/loader.txt", 'w')
    metaloader.write("% Loader automatically generated by test script\n")
    metaloader.write("directory " + directory + "\n")
    metaloader.write("loader    loader.txt")
    
    
# Print the contents of a file.
def printFile(filename, indent=""):
    for line in filename:
        print indent + line,


# Run a single test in the specified directory.
def runTest(directory):
    errlog = tempfile.TemporaryFile()

    command = "Debug/Loki2 > ../logfile.txt"
    subdir = directory.replace("test_files/","")
    updateMetaLoader(subdir)
    
    message = "Testing " + subdir + "... "
    print message.ljust(40),    # Pad the message so everything lines up
    
    process = subprocess.Popen(command, shell=True, stderr=errlog)
    process.wait()
    p = process.returncode

    if p == 0:  # Execution finished successfully, so now test the output.
        diffFile = tempfile.NamedTemporaryFile()
        regexpFile = open(directory+"/.regexp")
        regexp = regexpFile.readline().strip()
        
        # diff then grep: would prefer grep then diff so diff receives smaller files
        command = "diff " + directory + "/.expected ../logfile.txt | grep \""\
                + regexp + "\" > " + diffFile.name
        process2 = subprocess.Popen(command, shell=True)
        process2.wait()
        diffFile.flush()
        if process2.returncode != 0:
            # Get the last line from the logfile: "Total execution time: ..."
            logfile = open("../logfile.txt", "r")
            cycleLine = logfile.readlines()[-1]
            logfile.close()
            cycleCount = cycleLine.split(":")[1].strip(" \n")
            print 'passed (' + cycleCount + ')'
        else:
            print 'failed (incorrect behaviour)'
            printFile(diffFile, "  ")
        diffFile.close()
        
    else:       # Simulation threw an exception: print the error report.
        print 'failed (simulation error)'
        printFile(errlog, "  ")
        
    errlog.close()
    

# Determine whether this collection of files contains all information required
# to run a test.
def containsTest(directory):
    return "loader.txt" in directory and\
           ".regexp" in directory and\
           ".expected" in directory
    
    
# Traverse the directory tree depth-first, running tests wherever possible.
def testAll(directory):
    testCount = 0
    contents = os.listdir(directory)
    contents.sort()
    if containsTest(contents):
        runTest(directory)
        testCount = testCount + 1
    if ".svn" in contents:
        contents.remove(".svn")
    for entry in contents:
        fullpath = directory + "/" + entry
        if os.path.isdir(fullpath):
            testCount += testAll(fullpath)
    return testCount
    
# See if there is a simulator where we expect it to be.
def simulatorFound(location):
    return os.path.exists(location)
        
# Execution starts here.
directory = "test_files"
testCount = 0
startTime = time.time()

simulator = "Debug/Loki2"
if not simulatorFound(simulator):
    print "Error: no simulator found at " + simulator
    exit()

if len(sys.argv) >= 2:
    # Run tests in all named subdirectories.
    for i in range(1, len(sys.argv)):
        subdir = directory + "/" + sys.argv[i]
        testCount += testAll(subdir)
else:
    # Run all tests.
    testCount = testAll(directory)

elapsedTime = time.time() - startTime
print "Completed %(tests)s tests in %(time).3f s" % {'tests': testCount, 'time': elapsedTime}

